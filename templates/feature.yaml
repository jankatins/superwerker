AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Sets up a superwerker feature. Make installatations more reliable by retrying failed CloudFormation stack creations and updates.

Parameters:
  FeatureName:
    Type: String
  TemplateURL:
    Type: String

Resources:

  SetupFeature:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt SetupFeatureCustomResource.Arn

  SetupFeatureCustomResource:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Timeout: 10
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: ssm:StartAutomationExecution
              Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/${FeatureAutomationDocument}:*
            - Effect: Allow
              Action: iam:PassRole
              Resource: !GetAtt FeatureAutomationRole.Arn
      Environment:
        Variables:
          SSM_DOCUMENT_TO_EXECUTE: !Ref FeatureAutomationDocument
      InlineCode: |
        import boto3
        import os
        import cfnresponse

        CREATE = 'Create'
        DELETE = 'Delete'
        UPDATE = 'Update'

        def exception_handling(function):
            def catch(event, context):
                try:
                    function(event, context)
                except Exception as e:
                    print(e)
                    print(event)
                    cfnresponse.send(event, context, cfnresponse.FAILED, {})

            return catch

        @exception_handling
        def handler(event, context):
            RequestType = event["RequestType"]
            Properties = event["ResourceProperties"]
            LogicalResourceId = event["LogicalResourceId"]
            PhysicalResourceId = event.get("PhysicalResourceId")

            print('RequestType: {}'.format(RequestType))
            print('PhysicalResourceId: {}'.format(PhysicalResourceId))
            print('LogicalResourceId: {}'.format(LogicalResourceId))

            id = PhysicalResourceId

            data = {}

            ssm = boto3.client('ssm')

            if RequestType == CREATE:
                ssm.start_automation_execution(DocumentName=os.environ['SSM_DOCUMENT_TO_EXECUTE'])

            cfnresponse.send(event, context, cfnresponse.SUCCESS, data, id)

  FeatureAutomationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ssm.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  FeatureAutomationDocument:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        assumeRole: '{{ AutomationAssumeRole }}'
        parameters:
          AutomationAssumeRole:
            type: String
            default: !GetAtt FeatureAutomationRole.Arn
          FeatureName:
            type: String
            default: !Ref FeatureName
        mainSteps:
          - name: createCloudFormationStack
            action: aws:createStack
            maxAttempts: 1
            onFailure: step:updateCloudFormationStack
            inputs:
              Capabilities:
                - CAPABILITY_IAM
                - CAPABILITY_AUTO_EXPAND
              StackName: "superwerker-feature-{{ FeatureName }}"
              TemplateURL: !Ref TemplateURL
              DisableRollback: true
              TimeoutInMinutes: 20
            nextStep: signalCloudFormationWaitCondition
          - name: updateCloudFormationStack
            action: aws:executeAwsApi
            inputs:
              Service: cloudformation
              Api: UpdateStack
              Capabilities:
                - CAPABILITY_IAM
                - CAPABILITY_AUTO_EXPAND
              StackName: "superwerker-feature-{{ FeatureName }}"
              TemplateURL: !Ref TemplateURL
              # DisableRollback: true # DisableRollback parameter is not yet known by SSM Automation
            nextStep: waitForCloudFormationStackUpdate
            maxAttempts: 10
          - name: waitForCloudFormationStackUpdate
            timeoutSeconds: 1800
            action: aws:waitForAwsResourceProperty
            inputs:
              Service: cloudformation
              Api: DescribeStacks
              StackName: "superwerker-feature-{{ FeatureName }}"
              PropertySelector: $.Stacks[0].StackStatus
              DesiredValues:
                - UPDATE_COMPLETE
            onFailure: step:updateCloudFormationStack # loop until it works or automation is interrupted
            nextStep: signalCloudFormationWaitCondition
          - name: signalCloudFormationWaitCondition
            action: aws:executeScript
            inputs:
              Runtime: python3.7
              Handler: script_handler
              InputPayload:
                signal_url: !Ref FeatureReadyHandle
              Script: |
                import json
                import urllib3
                import uuid

                def script_handler(event, context):
                  encoded_body = json.dumps({
                    "Status": "SUCCESS",
                    "Reason": "Feature setup completed",
                    "UniqueId": str(uuid.uuid4()),
                    "Data": "Feature setup completed"
                  })

                  http = urllib3.PoolManager()
                  http.request('PUT', event['signal_url'], body=encoded_body)
            isEnd: true
            maxAttempts: 10

  FeatureReadyHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  FeatureReadyHandleWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref FeatureReadyHandle
      Timeout: "1800"

Metadata:
  SuperwerkerVersion: 0.0.0-DEVELOPMENT
